;;
;; This file was generated by the Retargetable Decompiler
;; Website: https://retdec.com
;; Copyright (c) 2019 Retargetable Decompiler <info@retdec.com>
;;
;; Decompilation date: 2019-08-10 21:19:55
;; Architecture: x86-64
;;

;;
;; Code Segment
;;

; section: .init
; function: _init at 0x1000 -- 0x1001
; data inside code section at 0x1001 -- 0x1003
0x1001:   0f 1e                                              |..              |
; function: function_1003 at 0x1003 -- 0x101b
0x1003:   fa                                 	cli 
0x1004:   48 83 ec 08                        	sub rsp, 8
0x1008:   48 8b 05 d9 2f 00 00               	mov rax, qword ptr [rip + 0x2fd9]
0x100f:   48 85 c0                           	test rax, rax
0x1012:   74 02                              	je 0x1016 <function_1003+0x13>
0x1014:   ff d0                              	call rax <__gmon_start__>
0x1016:   48 83 c4 08                        	add rsp, 8
0x101a:   c3                                 	ret 
; section: .text
; function: _start at 0x1020 -- 0x1021
; data inside code section at 0x1021 -- 0x1050
0x1021:   0f 1e fa 31 ed 49 89 d1  5e 48 89 e2 48 83 e4 f0   |...1.I..^H..H...|
0x1031:   50 54 4c 8d 05 76 03 00  00 48 8d 0d ff 02 00 00   |PTL..v...H......|
0x1041:   48 8d 3d d8 00 00 00 ff  15 92 2f 00 00 f4 90      |H.=......./.... |
; function: deregister_tm_clones at 0x1050 -- 0x1079
0x1050:   48 8d 3d b1 2f 00 00               	lea rdi, [rip + 0x2fb1]
0x1057:   48 8d 05 aa 2f 00 00               	lea rax, [rip + 0x2faa]
0x105e:   48 39 f8                           	cmp rax, rdi
0x1061:   74 15                              	je 0x1078 <deregister_tm_clones+0x28>
0x1063:   48 8b 05 6e 2f 00 00               	mov rax, qword ptr [rip + 0x2f6e]
0x106a:   48 85 c0                           	test rax, rax
0x106d:   74 09                              	je 0x1078 <deregister_tm_clones+0x28>
0x106f:   ff e0                              	jmp rax <_ITM_deregisterTMCloneTable>
; data inside code section at 0x1071 -- 0x1078
0x1071:   0f 1f 80 00 00 00 00                               |.......         |
0x1078:   c3                                 	ret 
; data inside code section at 0x1079 -- 0x1080
0x1079:   0f 1f 80 00 00 00 00                               |.......         |
; function: register_tm_clones at 0x1080 -- 0x10b9
0x1080:   48 8d 3d 81 2f 00 00               	lea rdi, [rip + 0x2f81]
0x1087:   48 8d 35 7a 2f 00 00               	lea rsi, [rip + 0x2f7a]
0x108e:   48 29 fe                           	sub rsi, rdi
0x1091:   48 c1 fe 03                        	sar rsi, 3
0x1095:   48 89 f0                           	mov rax, rsi
0x1098:   48 c1 e8 3f                        	shr rax, 0x3f
0x109c:   48 01 c6                           	add rsi, rax
0x109f:   48 d1 fe                           	sar rsi, 1
0x10a2:   74 14                              	je 0x10b8 <register_tm_clones+0x38>
0x10a4:   48 8b 05 45 2f 00 00               	mov rax, qword ptr [rip + 0x2f45]
0x10ab:   48 85 c0                           	test rax, rax
0x10ae:   74 08                              	je 0x10b8 <register_tm_clones+0x38>
0x10b0:   ff e0                              	jmp rax <_ITM_registerTMCloneTable>
; data inside code section at 0x10b2 -- 0x10b8
0x10b2:   66 0f 1f 44 00 00                                  |f..D..          |
0x10b8:   c3                                 	ret 
; data inside code section at 0x10b9 -- 0x10c0
0x10b9:   0f 1f 80 00 00 00 00                               |.......         |
; function: __do_global_dtors_aux at 0x10c0 -- 0x10c1
; data inside code section at 0x10c1 -- 0x10c3
0x10c1:   0f 1e                                              |..              |
; function: function_10c3 at 0x10c3 -- 0x1101
0x10c3:   fa                                 	cli 
0x10c4:   80 3d 3d 2f 00 00 00               	cmp byte ptr [rip + 0x2f3d], 0
0x10cb:   75 33                              	jne 0x1100 <function_10c3+0x3d>
0x10cd:   55                                 	push rbp
0x10ce:   48 83 3d 22 2f 00 00 00            	cmp qword ptr [rip + 0x2f22], 0
0x10d6:   48 89 e5                           	mov rbp, rsp
0x10d9:   74 0d                              	je 0x10e8 <function_10c3+0x25>
0x10db:   48 8b 3d 1e 2f 00 00               	mov rdi, qword ptr [rip + 0x2f1e]
0x10e2:   ff 15 10 2f 00 00                  	call qword ptr [rip + 0x2f10] <__cxa_finalize>
0x10e8:   e8 63 ff ff ff                     	call 0x1050 <deregister_tm_clones>
0x10ed:   c6 05 14 2f 00 00 01               	mov byte ptr [rip + 0x2f14], 1
0x10f4:   5d                                 	pop rbp
0x10f5:   c3                                 	ret 
; data inside code section at 0x10f6 -- 0x1100
0x10f6:   66 2e 0f 1f 84 00 00 00  00 00                     |f.........      |
0x1100:   c3                                 	ret 
; data inside code section at 0x1101 -- 0x1110
0x1101:   66 66 2e 0f 1f 84 00 00  00 00 00 0f 1f 40 00      |ff...........@. |
; function: frame_dummy at 0x1110 -- 0x1111
; data inside code section at 0x1111 -- 0x1113
0x1111:   0f 1e                                              |..              |
; function: function_1113 at 0x1113 -- 0x1119
0x1113:   fa                                 	cli 
0x1114:   e9 67 ff ff ff                     	jmp 0x1080 <register_tm_clones>
; data inside code section at 0x1119 -- 0x1120
0x1119:   0f 1f 80 00 00 00 00                               |.......         |
; function: main at 0x1120 -- 0x1332

Setup the stack
0x1120:   48 81 ec 08 01 00 00               	sub rsp, 0x108

Get the parent process id and store it into edi
0x1127:   b8 6e 00 00 00                     	mov eax, 0x6e
0x112c:   0f 05                              	syscall 
0x112e:   89 c7                              	mov edi, eax

Issue kill on parent process with 15
0x1130:   b8 3e 00 00 00                     	mov eax, 0x3e
0x1135:   be 0f 00 00 00                     	mov esi, 0xf
0x113a:   0f 05                              	syscall

Issue kill on parent process with 9
0x113c:   b8 3e 00 00 00                     	mov eax, 0x3e
0x1141:   be 09 00 00 00                     	mov esi, 9
0x1146:   0f 05                              	syscall

Zero out section of the stack where we will write the random data
0x1148:   66 0f ef c0                        	pxor xmm0, xmm0
0x114c:   66 0f 7f 44 24 50                  	movdqa xmmword ptr [rsp + 0x50], xmm0
0x1152:   66 0f 7f 44 24 40                  	movdqa xmmword ptr [rsp + 0x40], xmm0
0x1158:   66 0f 7f 44 24 30                  	movdqa xmmword ptr [rsp + 0x30], xmm0
0x115e:   66 0f 7f 44 24 20                  	movdqa xmmword ptr [rsp + 0x20], xmm0
0x1164:   66 0f 7f 44 24 10                  	movdqa xmmword ptr [rsp + 0x10], xmm0
0x116a:   66 0f 7f 04 24                     	movdqa xmmword ptr [rsp], xmm0
0x116f:   c7 44 24 60 00 00 00 00            	mov dword ptr [rsp + 0x60], 0

Open /dev/urandom. Fd returned into rax
0x1177:   48 8d 3d 82 0e 00 00               	lea rdi, [rip + 0xe82]
0x117e:   b8 02 00 00 00                     	mov eax, 2
0x1183:   31 f6                              	xor esi, esi
0x1185:   31 d2                              	xor edx, edx
0x1187:   0f 05                              	syscall

Read fd (/dev/urandom) into r8 (start at first element on the stack IE rsp)
0x1189:   89 c7                              	mov edi, eax
0x118b:   49 89 e0                           	mov r8, rsp
0x118e:   ba 64 00 00 00                     	mov edx, 0x64
0x1193:   31 c0                              	xor eax, eax
0x1195:   4c 89 c6                           	mov rsi, r8
0x1198:   0f 05                              	syscall

Display challenge message
0x119a:   48 8d 35 6c 0e 00 00               	lea rsi, [rip + 0xe6c] # 200d
0x11a1:   ba 50 00 00 00                     	mov edx, 0x50
0x11a6:   b8 01 00 00 00                     	mov eax, 1
0x11ab:   bf 01 00 00 00                     	mov edi, 1
0x11b0:   0f 05                              	syscall

Write random data to terminal 
0x11b2:   ba 64 00 00 00                     	mov edx, 0x64
0x11b7:   b8 01 00 00 00                     	mov eax, 1
0x11bc:   bf 01 00 00 00                     	mov edi, 1
0x11c1:   4c 89 c6                           	mov rsi, r8
0x11c4:   0f 05                              	syscall

Zero out part of the stack
0x11c6:   66 0f 7f 84 24 c0 00 00 00         	movdqa xmmword ptr [rsp + 0xc0], xmm0
0x11cf:   66 0f 7f 84 24 b0 00 00 00         	movdqa xmmword ptr [rsp + 0xb0], xmm0
0x11d8:   66 0f 7f 84 24 a0 00 00 00         	movdqa xmmword ptr [rsp + 0xa0], xmm0
0x11e1:   66 0f 7f 84 24 90 00 00 00         	movdqa xmmword ptr [rsp + 0x90], xmm0
0x11ea:   66 0f 7f 84 24 80 00 00 00         	movdqa xmmword ptr [rsp + 0x80], xmm0
0x11f3:   66 0f 7f 44 24 70                  	movdqa xmmword ptr [rsp + 0x70], xmm0
0x11f9:   c7 84 24 d0 00 00 00 00 00 00 00   	mov dword ptr [rsp + 0xd0], 0

Read stdin (eax = 0) into the recently zeroed stack
0x1204:   48 8d 74 24 70                     	lea rsi, [rsp + 0x70]
0x1209:   ba 64 00 00 00                     	mov edx, 0x64
0x120e:   31 c0                              	xor eax, eax
0x1210:   31 ff                              	xor edi, edi
0x1212:   0f 05                              	syscall

Make xmm0 all 1's
0x1214:   66 0f 76 c0                        	pcmpeqd xmm0, xmm0

Compute 1's complement of a section of stack where random input is stored. Rewrite it.
Do this for the full section of the stack
0x1218:   66 0f 6f 0c 24                     	movdqa xmm1, xmmword ptr [rsp]
0x121d:   66 0f ef c8                        	pxor xmm1, xmm0
0x1221:   66 0f 7f 0c 24                     	movdqa xmmword ptr [rsp], xmm1
0x1226:   66 0f 6f 4c 24 10                  	movdqa xmm1, xmmword ptr [rsp + 0x10]
0x122c:   66 0f ef c8                        	pxor xmm1, xmm0
0x1230:   66 0f 7f 4c 24 10                  	movdqa xmmword ptr [rsp + 0x10], xmm1
0x1236:   66 0f 6f 4c 24 20                  	movdqa xmm1, xmmword ptr [rsp + 0x20]
0x123c:   66 0f ef c8                        	pxor xmm1, xmm0
0x1240:   66 0f 7f 4c 24 20                  	movdqa xmmword ptr [rsp + 0x20], xmm1
0x1246:   66 0f 6f 4c 24 30                  	movdqa xmm1, xmmword ptr [rsp + 0x30]
0x124c:   66 0f ef c8                        	pxor xmm1, xmm0
0x1250:   66 0f 7f 4c 24 30                  	movdqa xmmword ptr [rsp + 0x30], xmm1
0x1256:   66 0f 6f 4c 24 40                  	movdqa xmm1, xmmword ptr [rsp + 0x40]
0x125c:   66 0f ef c8                        	pxor xmm1, xmm0
0x1260:   66 0f 7f 4c 24 40                  	movdqa xmmword ptr [rsp + 0x40], xmm1
0x1266:   66 0f ef 44 24 50                  	pxor xmm0, xmmword ptr [rsp + 0x50]
0x126c:   66 0f 7f 44 24 50                  	movdqa xmmword ptr [rsp + 0x50], xmm0
0x1272:   f6 54 24 60                        	not byte ptr [rsp + 0x60]
0x1276:   f6 54 24 61                        	not byte ptr [rsp + 0x61]
0x127a:   f6 54 24 62                        	not byte ptr [rsp + 0x62]
0x127e:   f6 54 24 63                        	not byte ptr [rsp + 0x63]

Write to lowest byte of rsi
Setup counter in rcx starting with 4
0x1282:   40 b6 01                           	mov sil, 1
0x1285:   b9 04 00 00 00                     	mov ecx, 4
0x128a:   66 0f 1f 44 00 00                  	nop word ptr [rax + rax]

Stack data at this point
rsp --> rsp + 0x6? : 1's complement
rsp + 0x70 --> rsp + 0xd? : User Input

KS: Begin while loop
0x1290:   0f b6 7c 0c fc                     	movzx edi, byte ptr [rsp + rcx - 4]
0x1295:   40 32 7c 0c 6c                     	xor dil, byte ptr [rsp + rcx + 0x6c]
0x129a:   0f b6 44 0c fd                     	movzx eax, byte ptr [rsp + rcx - 3]
0x129f:   32 44 0c 6d                        	xor al, byte ptr [rsp + rcx + 0x6d]
0x12a3:   0f b6 54 0c fe                     	movzx edx, byte ptr [rsp + rcx - 2]
0x12a8:   32 54 0c 6e                        	xor dl, byte ptr [rsp + rcx + 0x6e]
0x12ac:   08 c2                              	or dl, al
0x12ae:   40 08 fa                           	or dl, dil
0x12b1:   0f b6 7c 0c ff                     	movzx edi, byte ptr [rsp + rcx - 1]
0x12b6:   40 32 7c 0c 6f                     	xor dil, byte ptr [rsp + rcx + 0x6f]
0x12bb:   0f b6 04 0c                        	movzx eax, byte ptr [rsp + rcx]
0x12bf:   32 44 0c 70                        	xor al, byte ptr [rsp + rcx + 0x70]
0x12c3:   40 08 f8                           	or al, dil
0x12c6:   08 d0                              	or al, dl
0x12c8:   74 02                              	je 0x12cc <main+0x1ac>
0x12ca:   31 f6                              	xor esi, esi
0x12cc:   48 83 c1 05                        	add rcx, 5
0x12d0:   48 83 f9 68                        	cmp rcx, 0x68
0x12d4:   75 ba                              	jne 0x1290 <main+0x170>

IF stmt
0x12d6:   40 f6 c6 01                        	test sil, 1
0x12da:   74 4c                              	je 0x1328 <main+0x208>

Open flag.txt. Store file descriptor in edi
0x12dc:   48 8d 3d 7a 0d 00 00               	lea rdi, [rip + 0xd7a] 0x205d
0x12e3:   b8 02 00 00 00                     	mov eax, 2
0x12e8:   31 f6                              	xor esi, esi
0x12ea:   31 d2                              	xor edx, edx
0x12ec:   0f 05                              	syscall
0x12ee:   89 c7                              	mov edi, eax

Zero out part of the stack to be used as a buffer for the read.
0x12f0:   66 0f ef c0                        	pxor xmm0, xmm0
0x12f4:   66 0f 7f 84 24 f0 00 00 00         	movdqa xmmword ptr [rsp + 0xf0], xmm0
0x12fd:   66 0f 7f 84 24 e0 00 00 00         	movdqa xmmword ptr [rsp + 0xe0], xmm0

KS: Read the contents of flag.txt into a buffer on the stack (rsi has a pointer to it)
0x1306:   48 8d b4 24 e0 00 00 00            	lea rsi, [rsp + 0xe0]
0x130e:   ba 20 00 00 00                     	mov edx, 0x20
0x1313:   31 c0                              	xor eax, eax
0x1315:   0f 05                              	syscall

KS: Write the buffer to stdout
0x1317:   ba 20 00 00 00                     	mov edx, 0x20
0x131c:   b8 01 00 00 00                     	mov eax, 1
0x1321:   bf 01 00 00 00                     	mov edi, 1
0x1326:   0f 05                              	syscall

// KS: After IF stmt
0x1328:   31 c0                              	xor eax, eax
0x132a:   48 81 c4 08 01 00 00               	add rsp, 0x108
0x1331:   c3                                 	ret


; data inside code section at 0x1332 -- 0x1340
0x1332:   66 2e 0f 1f 84 00 00 00  00 00 0f 1f 40 00         |f...........@.  |
; function: __libc_csu_init at 0x1340 -- 0x1341
; data inside code section at 0x1341 -- 0x1343
0x1341:   0f 1e                                              |..              |
; function: function_1343 at 0x1343 -- 0x13a5
0x1343:   fa                                 	cli 
0x1344:   41 57                              	push r15
0x1346:   49 89 d7                           	mov r15, rdx
0x1349:   41 56                              	push r14
0x134b:   49 89 f6                           	mov r14, rsi
0x134e:   41 55                              	push r13
0x1350:   41 89 fd                           	mov r13d, edi
0x1353:   41 54                              	push r12
0x1355:   4c 8d 25 a4 2a 00 00               	lea r12, [rip + 0x2aa4]
0x135c:   55                                 	push rbp
0x135d:   48 8d 2d a4 2a 00 00               	lea rbp, [rip + 0x2aa4]
0x1364:   53                                 	push rbx
0x1365:   4c 29 e5                           	sub rbp, r12
0x1368:   48 83 ec 08                        	sub rsp, 8
0x136c:   67 e8 8e fc ff ff                  	call 0x1000 <_init>
0x1372:   48 c1 fd 03                        	sar rbp, 3
0x1376:   74 1e                              	je 0x1396 <function_1343+0x53>
0x1378:   31 db                              	xor ebx, ebx
0x137a:   66 0f 1f 44 00 00                  	nop word ptr [rax + rax]
0x1380:   4c 89 fa                           	mov rdx, r15
0x1383:   4c 89 f6                           	mov rsi, r14
0x1386:   44 89 ef                           	mov edi, r13d
0x1389:   41 ff 14 dc                        	call qword ptr [r12 + rbx*8]
0x138d:   48 83 c3 01                        	add rbx, 1
0x1391:   48 39 dd                           	cmp rbp, rbx
0x1394:   75 ea                              	jne 0x1380 <function_1343+0x3d>
0x1396:   48 83 c4 08                        	add rsp, 8
0x139a:   5b                                 	pop rbx
0x139b:   5d                                 	pop rbp
0x139c:   41 5c                              	pop r12
0x139e:   41 5d                              	pop r13
0x13a0:   41 5e                              	pop r14
0x13a2:   41 5f                              	pop r15
0x13a4:   c3                                 	ret 
; data inside code section at 0x13a5 -- 0x13b0
0x13a5:   66 66 2e 0f 1f 84 00 00  00 00 00                  |ff.........     |
; function: __libc_csu_fini at 0x13b0 -- 0x13b1
; data inside code section at 0x13b1 -- 0x13b3
0x13b1:   0f 1e                                              |..              |
; function: function_13b3 at 0x13b3 -- 0x13b5
0x13b3:   fa                                 	cli 
0x13b4:   c3                                 	ret 
; section: .fini
; function: _fini at 0x13b8 -- 0x13b9
; data inside code section at 0x13b9 -- 0x13bb
0x13b9:   0f 1e                                              |..              |
; function: function_13bb at 0x13bb -- 0x13c5
0x13bb:   fa                                 	cli 
0x13bc:   48 83 ec 08                        	sub rsp, 8
0x13c0:   48 83 c4 08                        	add rsp, 8
0x13c4:   c3                                 	ret 

;;
;; Data Segment
;;

; section: .interp
0x2a8:    2f 6c 69 62 36 34 2f 6c  64 2d 6c 69 6e 75 78 2d   |/lib64/ld-linux-|
0x2b8:    78 38 36 2d 36 34 2e 73  6f 2e 32 00 04            |x86-64.so.2..   |
; section: .gnu.hash
0x308:    01 00 00 00 01 00 00 00  01 00 00 00 00 00 00 00   |................|
0x318:    00 00 00 00 00 00 00 00  00 00 00 00 ??            |............?   |
; section: .dynsym
0x328:    00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   |................|
0x338:    00 00 00 00 00 00 00 00  38 00 00 00 20 00 00 00   |........8... ...|
0x348:    00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   |................|
0x358:    1a 00 00 00 12 00 00 00  00 00 00 00 00 00 00 00   |................|
0x368:    00 00 00 00 00 00 00 00  54 00 00 00 20 00 00 00   |........T... ...|
0x378:    00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   |................|
0x388:    63 00 00 00 20 00 00 00  00 00 00 00 00 00 00 00   |c... ...........|
0x398:    00 00 00 00 00 00 00 00  0b 00 00 00 22 00 00 00   |............"...|
0x3a8:    00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   |................|
0x3b8:    00                                                 |.               |
; section: .dynstr
0x3b8:    00 6c 69 62 63 2e 73 6f  2e 36 00 5f 5f 63 78 61   |.libc.so.6.__cxa|
0x3c8:    5f 66 69 6e 61 6c 69 7a  65 00 5f 5f 6c 69 62 63   |_finalize.__libc|
0x3d8:    5f 73 74 61 72 74 5f 6d  61 69 6e 00 47 4c 49 42   |_start_main.GLIB|
0x3e8:    43 5f 32 2e 32 2e 35 00  5f 49 54 4d 5f 64 65 72   |C_2.2.5._ITM_der|
0x3f8:    65 67 69 73 74 65 72 54  4d 43 6c 6f 6e 65 54 61   |egisterTMCloneTa|
0x408:    62 6c 65 00 5f 5f 67 6d  6f 6e 5f 73 74 61 72 74   |ble.__gmon_start|
0x418:    5f 5f 00 5f 49 54 4d 5f  72 65 67 69 73 74 65 72   |__._ITM_register|
0x428:    54 4d 43 6c 6f 6e 65 54  61 62 6c 65 00 ??         |TMCloneTable.?  |
; section: .gnu.version
0x436:    00 00 00 00 02 00 00 00  00 00 02 00 ??            |............?   |
; section: .gnu.version_r
0x448:    01 00 01 00 01 00 00 00  10 00 00 00 00 00 00 00   |................|
0x458:    75 1a 69 09 00 00 02 00  2c 00 00 00 00 00 00 00   |u.i.....,.......|
0x468:    00                                                 |.               |
; section: .rela.dyn
0x468:    00 3e 00 00 00 00 00 00  08 00 00 00 00 00 00 00   |.>..............|
0x478:    10 11 00 00 00 00 00 00  08 3e 00 00 00 00 00 00   |.........>......|
0x488:    08 00 00 00 00 00 00 00  c0 10 00 00 00 00 00 00   |................|
0x498:    00 40 00 00 00 00 00 00  08 00 00 00 00 00 00 00   |.@..............|
0x4a8:    00 40 00 00 00 00 00 00  d8 3f 00 00 00 00 00 00   |.@.......?......|
0x4b8:    06 00 00 00 01 00 00 00  00 00 00 00 00 00 00 00   |................|
0x4c8:    e0 3f 00 00 00 00 00 00  06 00 00 00 02 00 00 00   |.?..............|
0x4d8:    00 00 00 00 00 00 00 00  e8 3f 00 00 00 00 00 00   |.........?......|
0x4e8:    06 00 00 00 03 00 00 00  00 00 00 00 00 00 00 00   |................|
0x4f8:    f0 3f 00 00 00 00 00 00  06 00 00 00 04 00 00 00   |.?..............|
0x508:    00 00 00 00 00 00 00 00  f8 3f 00 00 00 00 00 00   |.........?......|
0x518:    06 00 00 00 05 00 00 00  00 00 00 00 00 00 00 00   |................|
0x528:    ??                                                 |?               |
; section: .rodata
0x2000:   2f 64 65 76 2f 75 72 61  6e 64 6f 6d 00            |/dev/urandom.   |   "/dev/urandom"
0x200d:   69 66 20 79 6f 75 20 63  61 6e 20 74 65 6c 6c 20   |if you can tell |   "if you can tell me the ones complement of the following i'll tell you a flag ;)\nflag.txt"
0x201d:   6d 65 20 74 68 65 20 6f  6e 65 73 20 63 6f 6d 70   |me the ones comp|
0x202d:   6c 65 6d 65 6e 74 20 6f  66 20 74 68 65 20 66 6f   |lement of the fo|
0x203d:   6c 6c 6f 77 69 6e 67 20  69 27 6c 6c 20 74 65 6c   |llowing i'll tel|
0x204d:   6c 20 79 6f 75 20 61 20  66 6c 61 67 20 3b 29 0a   |l you a flag ;).|
0x205d:   66 6c 61 67 2e 74 78 74  00                        |flag.txt.       |
0x2066:   ??                                                 |?               |
; section: .eh_frame_hdr
0x2068:   01 1b 03 3b 2c 00 00 00  04 00 00 00 b8 ef ff ff   |...;,...........|
0x2078:   48 00 00 00 b8 f0 ff ff  60 00 00 00 d8 f2 ff ff   |H.......`.......|
0x2088:   80 00 00 00 48 f3 ff ff  c8 00 00 00 ??            |....H.......?   |
; section: .eh_frame
0x2098:   14 00 00 00 00 00 00 00  01 7a 52 00 01 78 10 01   |.........zR..x..|
0x20a8:   1b 0c 07 08 90 01 00 00  14 00 00 00 1c 00 00 00   |................|
0x20b8:   68 ef ff ff 2f 00 00 00  00 44 07 10 00 00 00 00   |h.../....D......|
0x20c8:   1c 00 00 00 34 00 00 00  50 f0 ff ff 12 02 00 00   |....4...P.......|
0x20d8:   00 47 0e 90 02 03 0a 02  0e 08 00 00 00 00 00 00   |.G..............|
0x20e8:   44 00 00 00 54 00 00 00  50 f2 ff ff 65 00 00 00   |D...T...P...e...|
0x20f8:   00 46 0e 10 8f 02 45 0e  18 8e 03 45 0e 20 8d 04   |.F....E....E. ..|
0x2108:   45 0e 28 8c 05 48 0e 30  86 06 48 0e 38 83 07 47   |E.(..H.0..H.8..G|
0x2118:   0e 40 6e 0e 38 41 0e 30  41 0e 28 42 0e 20 42 0e   |.@n.8A.0A.(B. B.|
0x2128:   18 42 0e 10 42 0e 08 00  10 00 00 00 9c 00 00 00   |.B..B...........|
0x2138:   78 f2 ff ff 05 00 00 00  00 00 00 00 00 00 00 00   |x...............|
0x2148:   ??                                                 |?               |
; section: .init_array
0x3e00:   10 11 00 00 00 00 00 00  c0                        |.........       |
; section: .fini_array
0x3e08:   c0 10 00 00 00 00 00 00  01                        |.........       |
; section: .dynamic
0x3e10:   01 00 00 00 00 00 00 00  01 00 00 00 00 00 00 00   |................|
0x3e20:   0c 00 00 00 00 00 00 00  00 10 00 00 00 00 00 00   |................|
0x3e30:   0d 00 00 00 00 00 00 00  b8 13 00 00 00 00 00 00   |................|
0x3e40:   19 00 00 00 00 00 00 00  00 3e 00 00 00 00 00 00   |.........>......|
0x3e50:   1b 00 00 00 00 00 00 00  08 00 00 00 00 00 00 00   |................|
0x3e60:   1a 00 00 00 00 00 00 00  08 3e 00 00 00 00 00 00   |.........>......|
0x3e70:   1c 00 00 00 00 00 00 00  08 00 00 00 00 00 00 00   |................|
0x3e80:   f5 fe ff 6f 00 00 00 00  08 03 00 00 00 00 00 00   |...o............|
0x3e90:   05 00 00 00 00 00 00 00  b8 03 00 00 00 00 00 00   |................|
0x3ea0:   06 00 00 00 00 00 00 00  28 03 00 00 00 00 00 00   |........(.......|
0x3eb0:   0a 00 00 00 00 00 00 00  7d 00 00 00 00 00 00 00   |........}.......|
0x3ec0:   0b 00 00 00 00 00 00 00  18 00 00 00 00 00 00 00   |................|
0x3ed0:   15 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   |................|
0x3ee0:   07 00 00 00 00 00 00 00  68 04 00 00 00 00 00 00   |........h.......|
0x3ef0:   08 00 00 00 00 00 00 00  c0 00 00 00 00 00 00 00   |................|
0x3f00:   09 00 00 00 00 00 00 00  18 00 00 00 00 00 00 00   |................|
0x3f10:   18 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   |................|
0x3f20:   fb ff ff 6f 00 00 00 00  01 00 00 08 00 00 00 00   |...o............|
0x3f30:   fe ff ff 6f 00 00 00 00  48 04 00 00 00 00 00 00   |...o....H.......|
0x3f40:   ff ff ff 6f 00 00 00 00  01 00 00 00 00 00 00 00   |...o............|
0x3f50:   f0 ff ff 6f 00 00 00 00  36 04 00 00 00 00 00 00   |...o....6.......|
0x3f60:   f9 ff ff 6f 00 00 00 00  03 00 00 00 00 00 00 00   |...o............|
0x3f70:   00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   |................|
0x3f80:   00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   |................|
0x3f90:   00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   |................|
0x3fa0:   00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   |................|
0x3fb0:   00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   |................|
0x3fc0:   10                                                 |.               |
; section: .got
0x3fc0:   10 3e 00 00 00 00 00 00  00 00 00 00 00 00 00 00   |.>..............|
0x3fd0:   00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   |................|
0x3fe0:   00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   |................|
0x3ff0:   00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00   |................|
0x4000:   00                                                 |.               |
; section: .data
0x4000:   00 40 00 00 00 00 00 00  00                        |.@.......       |
